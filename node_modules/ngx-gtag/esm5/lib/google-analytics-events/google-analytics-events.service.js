/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
var NgxGtagEventService = /** @class */ (function () {
    function NgxGtagEventService(platform) {
        this.platform = platform;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgxGtagEventService.prototype.event = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isPlatformBrowser(this.platform)) {
            try {
                gtag('event', event.action, event.options);
            }
            catch (err) {
                console.error('Error occured with google analytics event', err);
            }
        }
    };
    NgxGtagEventService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxGtagEventService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ NgxGtagEventService.ngInjectableDef = i0.defineInjectable({ factory: function NgxGtagEventService_Factory() { return new NgxGtagEventService(i0.inject(i0.PLATFORM_ID)); }, token: NgxGtagEventService, providedIn: "root" });
    return NgxGtagEventService;
}());
export { NgxGtagEventService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxGtagEventService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy1ldmVudHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ndGFnLyIsInNvdXJjZXMiOlsibGliL2dvb2dsZS1hbmFseXRpY3MtZXZlbnRzL2dvb2dsZS1hbmFseXRpY3MtZXZlbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFJcEQ7SUFJRSw2QkFDK0IsUUFBZ0I7UUFBaEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtJQUFJLENBQUM7Ozs7O0lBRXBELG1DQUFLOzs7O0lBQUwsVUFBTSxLQUFtQjtRQUN2QixJQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQztZQUNsQyxJQUFJO2dCQUNGLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDNUM7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2pFO1NBQ0Y7SUFDSCxDQUFDOztnQkFmRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQUcwQyxNQUFNLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7OzhCQVZ2QjtDQXFCQyxBQWhCRCxJQWdCQztTQWJZLG1CQUFtQjs7Ozs7O0lBRTVCLHVDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5neEd0YWdFdmVudCB9IGZyb20gJy4uL2dvb2dsZS1hbmFseXRpY3MuaW50ZXJmYWNlJztcbmRlY2xhcmUgdmFyIGd0YWc6IGFueTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4R3RhZ0V2ZW50U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm06IE9iamVjdCkgeyB9XG5cbiAgZXZlbnQoZXZlbnQ6IE5neEd0YWdFdmVudCkge1xuICAgIGlmKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKXtcbiAgICAgIHRyeSB7XG4gICAgICAgIGd0YWcoJ2V2ZW50JywgZXZlbnQuYWN0aW9uLCBldmVudC5vcHRpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvY2N1cmVkIHdpdGggZ29vZ2xlIGFuYWx5dGljcyBldmVudCcsIGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=