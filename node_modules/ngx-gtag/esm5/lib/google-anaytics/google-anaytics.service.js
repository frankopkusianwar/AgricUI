/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { NGX_GTAG_CONFIG } from '../google-analytics.token';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../google-analytics.token";
import * as i3 from "@angular/common";
var GoogleAnayticsService = /** @class */ (function () {
    function GoogleAnayticsService(router, config, document, platform) {
        this.router = router;
        this.config = config;
        this.document = document;
        this.platform = platform;
    }
    /**
     * @return {?}
     */
    GoogleAnayticsService.prototype.startTracking = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            if (Array.isArray(this.config)) {
                this.config.forEach(function (conf) {
                    conf.options = {};
                    /** @type {?} */
                    var s1 = _this.renderer.createElement('script');
                    s1.src = "https://www.googletagmanager.com/gtag/js?id='" + conf.trackingId + "'";
                    _this.renderer.appendChild(_this.document.head, s1);
                });
            }
            else if (this.config.options === undefined) {
                this.config.options = {};
                /** @type {?} */
                var s1 = this.renderer.createElement('script');
                s1.src = "https://www.googletagmanager.com/gtag/js?id='" + this.config.trackingId + "'";
                this.renderer.appendChild(this.document.head, s1);
            }
            /** @type {?} */
            var s2 = this.renderer.createElement('script');
            /** @type {?} */
            var text = this.renderer.createText("window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());");
            this.renderer.appendChild(s2, text);
            this.renderer.appendChild(this.document.head, s2);
            this.router.events
                .pipe(filter(function (event) { return event instanceof NavigationEnd; }))
                .subscribe(function (navEnd) {
                if (Array.isArray(_this.config)) {
                    _this.config.forEach(function (conf) {
                        conf.options.page_path = navEnd.urlAfterRedirects;
                        gtag('config', conf.trackingId, conf.options);
                    });
                }
                else {
                    _this.config.options.page_path = navEnd.urlAfterRedirects;
                    gtag('config', _this.config.trackingId, _this.config.options);
                }
            });
        }
    };
    GoogleAnayticsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GoogleAnayticsService.ctorParameters = function () { return [
        { type: Router },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ GoogleAnayticsService.ngInjectableDef = i0.defineInjectable({ factory: function GoogleAnayticsService_Factory() { return new GoogleAnayticsService(i0.inject(i1.Router), i0.inject(i2.NGX_GTAG_CONFIG), i0.inject(i3.DOCUMENT), i0.inject(i0.PLATFORM_ID)); }, token: GoogleAnayticsService, providedIn: "root" });
    return GoogleAnayticsService;
}());
export { GoogleAnayticsService };
if (false) {
    /** @type {?} */
    GoogleAnayticsService.prototype.trackingId;
    /** @type {?} */
    GoogleAnayticsService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYXl0aWNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZ3RhZy8iLCJzb3VyY2VzIjpbImxpYi9nb29nbGUtYW5heXRpY3MvZ29vZ2xlLWFuYXl0aWNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7OztBQUs1RDtJQU9JLCtCQUNZLE1BQWMsRUFDVyxNQUFlLEVBQ3RCLFFBQVEsRUFDTCxRQUFnQjtRQUhyQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1csV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFBO1FBQ0wsYUFBUSxHQUFSLFFBQVEsQ0FBUTtJQUM5QyxDQUFDOzs7O0lBRUosNkNBQWE7OztJQUFiO1FBQUEsaUJBcUNDO1FBcENHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2xDLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUM7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBYTtvQkFDOUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O3dCQUNkLEVBQUUsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7b0JBQzlDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsa0RBQWdELElBQUksQ0FBQyxVQUFVLE1BQUcsQ0FBQztvQkFDNUUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxDQUFBO2FBQ0w7aUJBQ0ksSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7b0JBQ3JCLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7Z0JBQzlDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsa0RBQWdELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxNQUFHLENBQUM7Z0JBQ25GLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3JEOztnQkFFRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOztnQkFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLHlHQUF5RyxDQUFDO1lBRWhKLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVsRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07aUJBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssWUFBWSxhQUFhLEVBQTlCLENBQThCLENBQUMsQ0FBQztpQkFDckQsU0FBUyxDQUFDLFVBQUMsTUFBcUI7Z0JBQzdCLElBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLEVBQUM7b0JBQzFCLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBYTt3QkFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFBO3dCQUNqRCxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQUNsRCxDQUFDLENBQUMsQ0FBQTtpQkFDTDtxQkFBSTtvQkFDRCxLQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFBO29CQUN4RCxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQy9EO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDVjtJQUNMLENBQUM7O2dCQW5ESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVRRLE1BQU07Z0RBZ0JOLE1BQU0sU0FBQyxlQUFlO2dEQUN0QixNQUFNLFNBQUMsUUFBUTtnQkFDdUIsTUFBTSx1QkFBNUMsTUFBTSxTQUFDLFdBQVc7OztnQ0FwQjNCO0NBNkRDLEFBcERELElBb0RDO1NBakRZLHFCQUFxQjs7O0lBQzlCLDJDQUFtQjs7SUFDbkIseUNBQW9COzs7OztJQUdoQix1Q0FBc0I7Ozs7O0lBQ3RCLHVDQUFnRDs7Ozs7SUFDaEQseUNBQWtDOzs7OztJQUNsQyx5Q0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lELCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyLCBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTkdYX0dUQUdfQ09ORklHIH0gZnJvbSAnLi4vZ29vZ2xlLWFuYWx5dGljcy50b2tlbic7XG5pbXBvcnQgeyBOZ3hHdGFnLCBOZ3hHdGFnTGlzdCB9IGZyb20gJy4uL2dvb2dsZS1hbmFseXRpY3MuaW50ZXJmYWNlJztcblxuZGVjbGFyZSBjb25zdCBndGFnOiBhbnk7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgR29vZ2xlQW5heXRpY3NTZXJ2aWNlIHtcbiAgICB0cmFja2luZ0lkOiBzdHJpbmc7XG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgICAgICBASW5qZWN0KE5HWF9HVEFHX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IE5neEd0YWcsXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm06IE9iamVjdFxuICAgICkge31cblxuICAgIHN0YXJ0VHJhY2tpbmcoKSB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkge1xuICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZykpe1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmZvckVhY2goKGNvbmY6IE5neEd0YWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZi5vcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgICAgIGxldCBzMSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHMxLnNyYyA9IGBodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPScke2NvbmYudHJhY2tpbmdJZH0nYDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmRvY3VtZW50LmhlYWQsIHMxKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZih0aGlzLmNvbmZpZy5vcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHMxID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICBzMS5zcmMgPSBgaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD0nJHt0aGlzLmNvbmZpZy50cmFja2luZ0lkfSdgO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5kb2N1bWVudC5oZWFkLCBzMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzMiA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVUZXh0KGB3aW5kb3cuZGF0YUxheWVyPXdpbmRvdy5kYXRhTGF5ZXJ8fFtdO2Z1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO31ndGFnKCdqcycsbmV3IERhdGUoKSk7YCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQoczIsIHRleHQpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmRvY3VtZW50LmhlYWQsIHMyKTtcblxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIuZXZlbnRzXG4gICAgICAgICAgICAgICAgLnBpcGUoZmlsdGVyKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgobmF2RW5kOiBOYXZpZ2F0aW9uRW5kKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmZvckVhY2goKGNvbmY6IE5neEd0YWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25mLm9wdGlvbnMucGFnZV9wYXRoID0gbmF2RW5kLnVybEFmdGVyUmVkaXJlY3RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3RhZygnY29uZmlnJywgY29uZi50cmFja2luZ0lkLCBjb25mLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5vcHRpb25zLnBhZ2VfcGF0aCA9IG5hdkVuZC51cmxBZnRlclJlZGlyZWN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3RhZygnY29uZmlnJywgdGhpcy5jb25maWcudHJhY2tpbmdJZCwgdGhpcy5jb25maWcub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==