import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { __assign } from 'tslib';
import { Injectable, PLATFORM_ID, Inject, InjectionToken, Component, Renderer2, NgModule, Optional, SkipSelf, Directive, ElementRef, Input, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxGtagEventService = /** @class */ (function () {
    function NgxGtagEventService(platform) {
        this.platform = platform;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgxGtagEventService.prototype.event = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isPlatformBrowser(this.platform)) {
            try {
                gtag('event', event.action, event.options);
            }
            catch (err) {
                console.error('Error occured with google analytics event', err);
            }
        }
    };
    NgxGtagEventService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NgxGtagEventService.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ NgxGtagEventService.ngInjectableDef = defineInjectable({ factory: function NgxGtagEventService_Factory() { return new NgxGtagEventService(inject(PLATFORM_ID)); }, token: NgxGtagEventService, providedIn: "root" });
    return NgxGtagEventService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NGX_GTAG_CONFIG = new InjectionToken('NGX_GTAG_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GoogleAnayticsService = /** @class */ (function () {
    function GoogleAnayticsService(router, config, document, platform) {
        this.router = router;
        this.config = config;
        this.document = document;
        this.platform = platform;
    }
    /**
     * @return {?}
     */
    GoogleAnayticsService.prototype.startTracking = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            if (Array.isArray(this.config)) {
                this.config.forEach(function (conf) {
                    conf.options = {};
                    /** @type {?} */
                    var s1 = _this.renderer.createElement('script');
                    s1.src = "https://www.googletagmanager.com/gtag/js?id='" + conf.trackingId + "'";
                    _this.renderer.appendChild(_this.document.head, s1);
                });
            }
            else if (this.config.options === undefined) {
                this.config.options = {};
                /** @type {?} */
                var s1 = this.renderer.createElement('script');
                s1.src = "https://www.googletagmanager.com/gtag/js?id='" + this.config.trackingId + "'";
                this.renderer.appendChild(this.document.head, s1);
            }
            /** @type {?} */
            var s2 = this.renderer.createElement('script');
            /** @type {?} */
            var text = this.renderer.createText("window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());");
            this.renderer.appendChild(s2, text);
            this.renderer.appendChild(this.document.head, s2);
            this.router.events
                .pipe(filter(function (event) { return event instanceof NavigationEnd; }))
                .subscribe(function (navEnd) {
                if (Array.isArray(_this.config)) {
                    _this.config.forEach(function (conf) {
                        conf.options.page_path = navEnd.urlAfterRedirects;
                        gtag('config', conf.trackingId, conf.options);
                    });
                }
                else {
                    _this.config.options.page_path = navEnd.urlAfterRedirects;
                    gtag('config', _this.config.trackingId, _this.config.options);
                }
            });
        }
    };
    GoogleAnayticsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GoogleAnayticsService.ctorParameters = function () { return [
        { type: Router },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ GoogleAnayticsService.ngInjectableDef = defineInjectable({ factory: function GoogleAnayticsService_Factory() { return new GoogleAnayticsService(inject(Router), inject(NGX_GTAG_CONFIG), inject(DOCUMENT), inject(PLATFORM_ID)); }, token: GoogleAnayticsService, providedIn: "root" });
    return GoogleAnayticsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GoogleAnayticsComponent = /** @class */ (function () {
    function GoogleAnayticsComponent(service, renderer) {
        this.service = service;
        this.renderer = renderer;
        this.service.renderer = this.renderer;
    }
    /**
     * @return {?}
     */
    GoogleAnayticsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.service.startTracking();
    };
    GoogleAnayticsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-gtag',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    GoogleAnayticsComponent.ctorParameters = function () { return [
        { type: GoogleAnayticsService },
        { type: Renderer2 }
    ]; };
    return GoogleAnayticsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GoogleAnalyticsEventsDirective = /** @class */ (function () {
    function GoogleAnalyticsEventsDirective(ngxGtagEventService, renderer, el) {
        this.ngxGtagEventService = ngxGtagEventService;
        this.renderer = renderer;
        this.el = el;
    }
    /**
     * @return {?}
     */
    GoogleAnalyticsEventsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        try {
            this.renderer.listen(this.el.nativeElement, this.gtagOn, function () {
                _this.ngxGtagEventService.event({ action: _this.gtagAction || _this.gtagOn, options: __assign({}, _this.gtagOptions) });
            });
        }
        catch (err) {
            console.error(err);
        }
    };
    GoogleAnalyticsEventsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxGtagEvent]'
                },] }
    ];
    /** @nocollapse */
    GoogleAnalyticsEventsDirective.ctorParameters = function () { return [
        { type: NgxGtagEventService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    GoogleAnalyticsEventsDirective.propDecorators = {
        gtagOn: [{ type: Input }],
        gtagTrackingId: [{ type: Input }],
        gtagAction: [{ type: Input }],
        gtagOptions: [{ type: Input }]
    };
    return GoogleAnalyticsEventsDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxGtagModule = /** @class */ (function () {
    function NgxGtagModule(parentModule) {
        if (parentModule) {
            throw new Error('ngx-gtag should only be loaded in one module, preferably your root or core module.');
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxGtagModule.forRoot = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxGtagModule,
            providers: [
                {
                    provide: NGX_GTAG_CONFIG,
                    useValue: options
                }
            ]
        };
    };
    NgxGtagModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        GoogleAnayticsComponent,
                        GoogleAnalyticsEventsDirective
                    ],
                    exports: [
                        GoogleAnayticsComponent,
                        GoogleAnalyticsEventsDirective
                    ]
                },] }
    ];
    /** @nocollapse */
    NgxGtagModule.ctorParameters = function () { return [
        { type: NgxGtagModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return NgxGtagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxGtagEventService, NgxGtagModule, GoogleAnalyticsEventsDirective as ɵd, NGX_GTAG_CONFIG as ɵc, GoogleAnayticsComponent as ɵa, GoogleAnayticsService as ɵb };

//# sourceMappingURL=ngx-gtag.js.map