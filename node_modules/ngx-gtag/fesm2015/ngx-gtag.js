import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { Injectable, PLATFORM_ID, Inject, Directive, Renderer2, Input, ElementRef, InjectionToken, Component, NgModule, Optional, SkipSelf, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGtagEventService {
    /**
     * @param {?} platform
     */
    constructor(platform) {
        this.platform = platform;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    event(event) {
        if (isPlatformBrowser(this.platform)) {
            try {
                gtag('event', event.action, event.options);
            }
            catch (err) {
                console.error('Error occured with google analytics event', err);
            }
        }
    }
}
NgxGtagEventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxGtagEventService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ NgxGtagEventService.ngInjectableDef = defineInjectable({ factory: function NgxGtagEventService_Factory() { return new NgxGtagEventService(inject(PLATFORM_ID)); }, token: NgxGtagEventService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGX_GTAG_CONFIG = new InjectionToken('NGX_GTAG_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleAnayticsService {
    /**
     * @param {?} router
     * @param {?} config
     * @param {?} document
     * @param {?} platform
     */
    constructor(router, config, document, platform) {
        this.router = router;
        this.config = config;
        this.document = document;
        this.platform = platform;
    }
    /**
     * @return {?}
     */
    startTracking() {
        if (isPlatformBrowser(this.platform)) {
            if (Array.isArray(this.config)) {
                this.config.forEach((conf) => {
                    conf.options = {};
                    /** @type {?} */
                    let s1 = this.renderer.createElement('script');
                    s1.src = `https://www.googletagmanager.com/gtag/js?id='${conf.trackingId}'`;
                    this.renderer.appendChild(this.document.head, s1);
                });
            }
            else if (this.config.options === undefined) {
                this.config.options = {};
                /** @type {?} */
                let s1 = this.renderer.createElement('script');
                s1.src = `https://www.googletagmanager.com/gtag/js?id='${this.config.trackingId}'`;
                this.renderer.appendChild(this.document.head, s1);
            }
            /** @type {?} */
            let s2 = this.renderer.createElement('script');
            /** @type {?} */
            const text = this.renderer.createText(`window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());`);
            this.renderer.appendChild(s2, text);
            this.renderer.appendChild(this.document.head, s2);
            this.router.events
                .pipe(filter(event => event instanceof NavigationEnd))
                .subscribe((navEnd) => {
                if (Array.isArray(this.config)) {
                    this.config.forEach((conf) => {
                        conf.options.page_path = navEnd.urlAfterRedirects;
                        gtag('config', conf.trackingId, conf.options);
                    });
                }
                else {
                    this.config.options.page_path = navEnd.urlAfterRedirects;
                    gtag('config', this.config.trackingId, this.config.options);
                }
            });
        }
    }
}
GoogleAnayticsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GoogleAnayticsService.ctorParameters = () => [
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ GoogleAnayticsService.ngInjectableDef = defineInjectable({ factory: function GoogleAnayticsService_Factory() { return new GoogleAnayticsService(inject(Router), inject(NGX_GTAG_CONFIG), inject(DOCUMENT), inject(PLATFORM_ID)); }, token: GoogleAnayticsService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleAnayticsComponent {
    /**
     * @param {?} service
     * @param {?} renderer
     */
    constructor(service, renderer) {
        this.service = service;
        this.renderer = renderer;
        this.service.renderer = this.renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.service.startTracking();
    }
}
GoogleAnayticsComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-gtag',
                template: ''
            }] }
];
/** @nocollapse */
GoogleAnayticsComponent.ctorParameters = () => [
    { type: GoogleAnayticsService },
    { type: Renderer2 }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GoogleAnalyticsEventsDirective {
    /**
     * @param {?} ngxGtagEventService
     * @param {?} renderer
     * @param {?} el
     */
    constructor(ngxGtagEventService, renderer, el) {
        this.ngxGtagEventService = ngxGtagEventService;
        this.renderer = renderer;
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        try {
            this.renderer.listen(this.el.nativeElement, this.gtagOn, () => {
                this.ngxGtagEventService.event({ action: this.gtagAction || this.gtagOn, options: Object.assign({}, this.gtagOptions) });
            });
        }
        catch (err) {
            console.error(err);
        }
    }
}
GoogleAnalyticsEventsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxGtagEvent]'
            },] }
];
/** @nocollapse */
GoogleAnalyticsEventsDirective.ctorParameters = () => [
    { type: NgxGtagEventService },
    { type: Renderer2 },
    { type: ElementRef }
];
GoogleAnalyticsEventsDirective.propDecorators = {
    gtagOn: [{ type: Input }],
    gtagTrackingId: [{ type: Input }],
    gtagAction: [{ type: Input }],
    gtagOptions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxGtagModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('ngx-gtag should only be loaded in one module, preferably your root or core module.');
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgxGtagModule,
            providers: [
                {
                    provide: NGX_GTAG_CONFIG,
                    useValue: options
                }
            ]
        };
    }
}
NgxGtagModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    GoogleAnayticsComponent,
                    GoogleAnalyticsEventsDirective
                ],
                exports: [
                    GoogleAnayticsComponent,
                    GoogleAnalyticsEventsDirective
                ]
            },] }
];
/** @nocollapse */
NgxGtagModule.ctorParameters = () => [
    { type: NgxGtagModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxGtagEventService, NgxGtagModule, GoogleAnalyticsEventsDirective as ɵd, NGX_GTAG_CONFIG as ɵc, GoogleAnayticsComponent as ɵa, GoogleAnayticsService as ɵb };

//# sourceMappingURL=ngx-gtag.js.map