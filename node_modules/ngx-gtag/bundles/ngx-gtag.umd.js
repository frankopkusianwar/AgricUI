(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/router'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-gtag', ['exports', '@angular/common', '@angular/router', 'rxjs/operators', '@angular/core'], factory) :
    (factory((global['ngx-gtag'] = {}),global.ng.common,global.ng.router,global.rxjs.operators,global.ng.core));
}(this, (function (exports,i3,i1,operators,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxGtagEventService = /** @class */ (function () {
        function NgxGtagEventService(platform) {
            this.platform = platform;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        NgxGtagEventService.prototype.event = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (i3.isPlatformBrowser(this.platform)) {
                    try {
                        gtag('event', event.action, event.options);
                    }
                    catch (err) {
                        console.error('Error occured with google analytics event', err);
                    }
                }
            };
        NgxGtagEventService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgxGtagEventService.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        /** @nocollapse */ NgxGtagEventService.ngInjectableDef = i0.defineInjectable({ factory: function NgxGtagEventService_Factory() { return new NgxGtagEventService(i0.inject(i0.PLATFORM_ID)); }, token: NgxGtagEventService, providedIn: "root" });
        return NgxGtagEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGX_GTAG_CONFIG = new i0.InjectionToken('NGX_GTAG_CONFIG');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleAnayticsService = /** @class */ (function () {
        function GoogleAnayticsService(router, config, document, platform) {
            this.router = router;
            this.config = config;
            this.document = document;
            this.platform = platform;
        }
        /**
         * @return {?}
         */
        GoogleAnayticsService.prototype.startTracking = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (i3.isPlatformBrowser(this.platform)) {
                    if (Array.isArray(this.config)) {
                        this.config.forEach(function (conf) {
                            conf.options = {};
                            /** @type {?} */
                            var s1 = _this.renderer.createElement('script');
                            s1.src = "https://www.googletagmanager.com/gtag/js?id='" + conf.trackingId + "'";
                            _this.renderer.appendChild(_this.document.head, s1);
                        });
                    }
                    else if (this.config.options === undefined) {
                        this.config.options = {};
                        /** @type {?} */
                        var s1 = this.renderer.createElement('script');
                        s1.src = "https://www.googletagmanager.com/gtag/js?id='" + this.config.trackingId + "'";
                        this.renderer.appendChild(this.document.head, s1);
                    }
                    /** @type {?} */
                    var s2 = this.renderer.createElement('script');
                    /** @type {?} */
                    var text = this.renderer.createText("window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());");
                    this.renderer.appendChild(s2, text);
                    this.renderer.appendChild(this.document.head, s2);
                    this.router.events
                        .pipe(operators.filter(function (event) { return event instanceof i1.NavigationEnd; }))
                        .subscribe(function (navEnd) {
                        if (Array.isArray(_this.config)) {
                            _this.config.forEach(function (conf) {
                                conf.options.page_path = navEnd.urlAfterRedirects;
                                gtag('config', conf.trackingId, conf.options);
                            });
                        }
                        else {
                            _this.config.options.page_path = navEnd.urlAfterRedirects;
                            gtag('config', _this.config.trackingId, _this.config.options);
                        }
                    });
                }
            };
        GoogleAnayticsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        GoogleAnayticsService.ctorParameters = function () {
            return [
                { type: i1.Router },
                { type: undefined, decorators: [{ type: i0.Inject, args: [NGX_GTAG_CONFIG,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        /** @nocollapse */ GoogleAnayticsService.ngInjectableDef = i0.defineInjectable({ factory: function GoogleAnayticsService_Factory() { return new GoogleAnayticsService(i0.inject(i1.Router), i0.inject(NGX_GTAG_CONFIG), i0.inject(i3.DOCUMENT), i0.inject(i0.PLATFORM_ID)); }, token: GoogleAnayticsService, providedIn: "root" });
        return GoogleAnayticsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleAnayticsComponent = /** @class */ (function () {
        function GoogleAnayticsComponent(service, renderer) {
            this.service = service;
            this.renderer = renderer;
            this.service.renderer = this.renderer;
        }
        /**
         * @return {?}
         */
        GoogleAnayticsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.service.startTracking();
            };
        GoogleAnayticsComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ngx-gtag',
                        template: ''
                    }] }
        ];
        /** @nocollapse */
        GoogleAnayticsComponent.ctorParameters = function () {
            return [
                { type: GoogleAnayticsService },
                { type: i0.Renderer2 }
            ];
        };
        return GoogleAnayticsComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GoogleAnalyticsEventsDirective = /** @class */ (function () {
        function GoogleAnalyticsEventsDirective(ngxGtagEventService, renderer, el) {
            this.ngxGtagEventService = ngxGtagEventService;
            this.renderer = renderer;
            this.el = el;
        }
        /**
         * @return {?}
         */
        GoogleAnalyticsEventsDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                try {
                    this.renderer.listen(this.el.nativeElement, this.gtagOn, function () {
                        _this.ngxGtagEventService.event({ action: _this.gtagAction || _this.gtagOn, options: __assign({}, _this.gtagOptions) });
                    });
                }
                catch (err) {
                    console.error(err);
                }
            };
        GoogleAnalyticsEventsDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[ngxGtagEvent]'
                    },] }
        ];
        /** @nocollapse */
        GoogleAnalyticsEventsDirective.ctorParameters = function () {
            return [
                { type: NgxGtagEventService },
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        GoogleAnalyticsEventsDirective.propDecorators = {
            gtagOn: [{ type: i0.Input }],
            gtagTrackingId: [{ type: i0.Input }],
            gtagAction: [{ type: i0.Input }],
            gtagOptions: [{ type: i0.Input }]
        };
        return GoogleAnalyticsEventsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxGtagModule = /** @class */ (function () {
        function NgxGtagModule(parentModule) {
            if (parentModule) {
                throw new Error('ngx-gtag should only be loaded in one module, preferably your root or core module.');
            }
        }
        /**
         * @param {?} options
         * @return {?}
         */
        NgxGtagModule.forRoot = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                return {
                    ngModule: NgxGtagModule,
                    providers: [
                        {
                            provide: NGX_GTAG_CONFIG,
                            useValue: options
                        }
                    ]
                };
            };
        NgxGtagModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            GoogleAnayticsComponent,
                            GoogleAnalyticsEventsDirective
                        ],
                        exports: [
                            GoogleAnayticsComponent,
                            GoogleAnalyticsEventsDirective
                        ]
                    },] }
        ];
        /** @nocollapse */
        NgxGtagModule.ctorParameters = function () {
            return [
                { type: NgxGtagModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
            ];
        };
        return NgxGtagModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxGtagEventService = NgxGtagEventService;
    exports.NgxGtagModule = NgxGtagModule;
    exports.ɵd = GoogleAnalyticsEventsDirective;
    exports.ɵc = NGX_GTAG_CONFIG;
    exports.ɵa = GoogleAnayticsComponent;
    exports.ɵb = GoogleAnayticsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-gtag.umd.js.map