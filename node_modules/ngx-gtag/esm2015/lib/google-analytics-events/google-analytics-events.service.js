/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
export class NgxGtagEventService {
    /**
     * @param {?} platform
     */
    constructor(platform) {
        this.platform = platform;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    event(event) {
        if (isPlatformBrowser(this.platform)) {
            try {
                gtag('event', event.action, event.options);
            }
            catch (err) {
                console.error('Error occured with google analytics event', err);
            }
        }
    }
}
NgxGtagEventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgxGtagEventService.ctorParameters = () => [
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ NgxGtagEventService.ngInjectableDef = i0.defineInjectable({ factory: function NgxGtagEventService_Factory() { return new NgxGtagEventService(i0.inject(i0.PLATFORM_ID)); }, token: NgxGtagEventService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxGtagEventService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy1ldmVudHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1ndGFnLyIsInNvdXJjZXMiOlsibGliL2dvb2dsZS1hbmFseXRpY3MtZXZlbnRzL2dvb2dsZS1hbmFseXRpY3MtZXZlbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFPcEQsTUFBTSxPQUFPLG1CQUFtQjs7OztJQUM5QixZQUMrQixRQUFnQjtRQUFoQixhQUFRLEdBQVIsUUFBUSxDQUFRO0lBQUksQ0FBQzs7Ozs7SUFFcEQsS0FBSyxDQUFDLEtBQW1CO1FBQ3ZCLElBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDO1lBQ2xDLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM1QztZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDakU7U0FDRjtJQUNILENBQUM7OztZQWZGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQUcwQyxNQUFNLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7Ozs7Ozs7SUFBbkIsdUNBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmd4R3RhZ0V2ZW50IH0gZnJvbSAnLi4vZ29vZ2xlLWFuYWx5dGljcy5pbnRlcmZhY2UnO1xuZGVjbGFyZSB2YXIgZ3RhZzogYW55O1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hHdGFnRXZlbnRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0KSB7IH1cblxuICBldmVudChldmVudDogTmd4R3RhZ0V2ZW50KSB7XG4gICAgaWYoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybSkpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgZ3RhZygnZXZlbnQnLCBldmVudC5hY3Rpb24sIGV2ZW50Lm9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9jY3VyZWQgd2l0aCBnb29nbGUgYW5hbHl0aWNzIGV2ZW50JywgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==