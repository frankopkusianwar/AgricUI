/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { NGX_GTAG_CONFIG } from '../google-analytics.token';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../google-analytics.token";
import * as i3 from "@angular/common";
export class GoogleAnayticsService {
    /**
     * @param {?} router
     * @param {?} config
     * @param {?} document
     * @param {?} platform
     */
    constructor(router, config, document, platform) {
        this.router = router;
        this.config = config;
        this.document = document;
        this.platform = platform;
    }
    /**
     * @return {?}
     */
    startTracking() {
        if (isPlatformBrowser(this.platform)) {
            if (Array.isArray(this.config)) {
                this.config.forEach((conf) => {
                    conf.options = {};
                    /** @type {?} */
                    let s1 = this.renderer.createElement('script');
                    s1.src = `https://www.googletagmanager.com/gtag/js?id='${conf.trackingId}'`;
                    this.renderer.appendChild(this.document.head, s1);
                });
            }
            else if (this.config.options === undefined) {
                this.config.options = {};
                /** @type {?} */
                let s1 = this.renderer.createElement('script');
                s1.src = `https://www.googletagmanager.com/gtag/js?id='${this.config.trackingId}'`;
                this.renderer.appendChild(this.document.head, s1);
            }
            /** @type {?} */
            let s2 = this.renderer.createElement('script');
            /** @type {?} */
            const text = this.renderer.createText(`window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());`);
            this.renderer.appendChild(s2, text);
            this.renderer.appendChild(this.document.head, s2);
            this.router.events
                .pipe(filter(event => event instanceof NavigationEnd))
                .subscribe((navEnd) => {
                if (Array.isArray(this.config)) {
                    this.config.forEach((conf) => {
                        conf.options.page_path = navEnd.urlAfterRedirects;
                        gtag('config', conf.trackingId, conf.options);
                    });
                }
                else {
                    this.config.options.page_path = navEnd.urlAfterRedirects;
                    gtag('config', this.config.trackingId, this.config.options);
                }
            });
        }
    }
}
GoogleAnayticsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GoogleAnayticsService.ctorParameters = () => [
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GTAG_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ GoogleAnayticsService.ngInjectableDef = i0.defineInjectable({ factory: function GoogleAnayticsService_Factory() { return new GoogleAnayticsService(i0.inject(i1.Router), i0.inject(i2.NGX_GTAG_CONFIG), i0.inject(i3.DOCUMENT), i0.inject(i0.PLATFORM_ID)); }, token: GoogleAnayticsService, providedIn: "root" });
if (false) {
    /** @type {?} */
    GoogleAnayticsService.prototype.trackingId;
    /** @type {?} */
    GoogleAnayticsService.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    GoogleAnayticsService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYXl0aWNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZ3RhZy8iLCJzb3VyY2VzIjpbImxpYi9nb29nbGUtYW5heXRpY3MvZ29vZ2xlLWFuYXl0aWNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7OztBQVE1RCxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7O0lBSTlCLFlBQ1ksTUFBYyxFQUNXLE1BQWUsRUFDdEIsUUFBUSxFQUNMLFFBQWdCO1FBSHJDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDVyxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQUE7UUFDTCxhQUFRLEdBQVIsUUFBUSxDQUFRO0lBQzlDLENBQUM7Ozs7SUFFSixhQUFhO1FBQ1QsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbEMsSUFBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQztnQkFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFhLEVBQUUsRUFBRTtvQkFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O3dCQUNkLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7b0JBQzlDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsZ0RBQWdELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQztvQkFDNUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxDQUFBO2FBQ0w7aUJBQ0ksSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7b0JBQ3JCLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7Z0JBQzlDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsZ0RBQWdELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUM7Z0JBQ25GLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3JEOztnQkFFRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOztrQkFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLHlHQUF5RyxDQUFDO1lBRWhKLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVsRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07aUJBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssWUFBWSxhQUFhLENBQUMsQ0FBQztpQkFDckQsU0FBUyxDQUFDLENBQUMsTUFBcUIsRUFBRSxFQUFFO2dCQUNqQyxJQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDO29CQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQWEsRUFBRSxFQUFFO3dCQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUE7d0JBQ2pELElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ2xELENBQUMsQ0FBQyxDQUFBO2lCQUNMO3FCQUFJO29CQUNELElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUE7b0JBQ3hELElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDL0Q7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNWO0lBQ0wsQ0FBQzs7O1lBbkRKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQVRRLE1BQU07NENBZ0JOLE1BQU0sU0FBQyxlQUFlOzRDQUN0QixNQUFNLFNBQUMsUUFBUTtZQUN1QixNQUFNLHVCQUE1QyxNQUFNLFNBQUMsV0FBVzs7Ozs7SUFQdkIsMkNBQW1COztJQUNuQix5Q0FBb0I7Ozs7O0lBR2hCLHVDQUFzQjs7Ozs7SUFDdEIsdUNBQWdEOzs7OztJQUNoRCx5Q0FBa0M7Ozs7O0lBQ2xDLHlDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIsIERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkVuZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBOR1hfR1RBR19DT05GSUcgfSBmcm9tICcuLi9nb29nbGUtYW5hbHl0aWNzLnRva2VuJztcbmltcG9ydCB7IE5neEd0YWcsIE5neEd0YWdMaXN0IH0gZnJvbSAnLi4vZ29vZ2xlLWFuYWx5dGljcy5pbnRlcmZhY2UnO1xuXG5kZWNsYXJlIGNvbnN0IGd0YWc6IGFueTtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVBbmF5dGljc1NlcnZpY2Uge1xuICAgIHRyYWNraW5nSWQ6IHN0cmluZztcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgICAgIEBJbmplY3QoTkdYX0dUQUdfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogTmd4R3RhZyxcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudCxcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybTogT2JqZWN0XG4gICAgKSB7fVxuXG4gICAgc3RhcnRUcmFja2luZygpIHtcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKSB7XG4gICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuZm9yRWFjaCgoY29uZjogTmd4R3RhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25mLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHMxID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgICAgICAgICAgczEuc3JjID0gYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9JyR7Y29uZi50cmFja2luZ0lkfSdgO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZG9jdW1lbnQuaGVhZCwgczEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKHRoaXMuY29uZmlnLm9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgczEgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIHMxLnNyYyA9IGBodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzP2lkPScke3RoaXMuY29uZmlnLnRyYWNraW5nSWR9J2A7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmRvY3VtZW50LmhlYWQsIHMxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHMyID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZVRleHQoYHdpbmRvdy5kYXRhTGF5ZXI9d2luZG93LmRhdGFMYXllcnx8W107ZnVuY3Rpb24gZ3RhZygpe2RhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7fWd0YWcoJ2pzJyxuZXcgRGF0ZSgpKTtgKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZChzMiwgdGV4dCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZG9jdW1lbnQuaGVhZCwgczIpO1xuXG4gICAgICAgICAgICB0aGlzLnJvdXRlci5ldmVudHNcbiAgICAgICAgICAgICAgICAucGlwZShmaWx0ZXIoZXZlbnQgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKChuYXZFbmQ6IE5hdmlnYXRpb25FbmQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZykpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWcuZm9yRWFjaCgoY29uZjogTmd4R3RhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmYub3B0aW9ucy5wYWdlX3BhdGggPSBuYXZFbmQudXJsQWZ0ZXJSZWRpcmVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndGFnKCdjb25maWcnLCBjb25mLnRyYWNraW5nSWQsIGNvbmYub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMucGFnZV9wYXRoID0gbmF2RW5kLnVybEFmdGVyUmVkaXJlY3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBndGFnKCdjb25maWcnLCB0aGlzLmNvbmZpZy50cmFja2luZ0lkLCB0aGlzLmNvbmZpZy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19